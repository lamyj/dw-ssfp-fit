#!/usr/bin/env python3

import argparse
import os
import socket
import subprocess
import sys
import tempfile

import nibabel
import numpy
from sycomore.units import *

import dw_ssfp_fit

def main():
    parser = argparse.ArgumentParser(
        description="Fit the diffusion tensor, and optionally the T1 and T2 "
            "from DW-SSFP data, after chunking the input data. This script "
            "must be run through a Slurm array of tasks.")
    
    parser.add_argument(
        "chunks_count", type=int,
        help="Number of chunks to split the data into")
    
    dw_ssfp_fit.add_parser_commands(parser)
    arguments = parser.parse_args()
    
    task_count = arguments.chunks_count
    
    task_id = int(os.environ["SLURM_ARRAY_TASK_ID"])
    print("Task {}/{} on {}".format(task_id, task_count, socket.gethostname()))
    
    with tempfile.TemporaryDirectory() as directory:
        B1_map = nibabel.load(arguments.B1_map)
        affine = B1_map.affine
        B1_map = B1_map.get_fdata()
        mask = numpy.asarray(nibabel.load(arguments.mask).dataobj)
        T1_map = (
            nibabel.load(arguments.T1_map).get_fdata() 
            if "T1" in arguments.inputs else None)
        T2_map = (
            nibabel.load(arguments.T2_map).get_fdata()
            if "T2" in arguments.inputs else None)
        
        mask_data = dw_ssfp_fit.get_combined_mask(B1_map, mask, T1_map, T1_map)
        
        mask_indices = numpy.array(mask_data.nonzero())
        sub_mask_size, remainder = divmod(mask_indices.shape[1], task_count)
        sub_mask_counts = numpy.array(task_count*[sub_mask_size])
        sub_mask_counts[:remainder] += 1
        sub_mask_offsets = numpy.hstack([[0], sub_mask_counts[:-1].cumsum()])
        
        print("{} voxels in task".format(sub_mask_counts[task_id]))
        
        sub_mask_data = numpy.zeros_like(mask_data, int)
        task_indices = mask_indices[
            :,
            sub_mask_offsets[task_id]:sub_mask_offsets[task_id]+sub_mask_counts[task_id]]
        sub_mask_data[tuple(task_indices.tolist())] = 1
        
        sub_mask_path = os.path.join(
            directory, "mask_{}.nii.gz".format(task_id))
        nibabel.save(nibabel.Nifti1Image(sub_mask_data, affine), sub_mask_path)
        
        def get_subset_path(path):
            stem, leaf = os.path.basename(path).split(".", 1)
            return os.path.join(
                os.path.dirname(arguments.D),
                "{}_{}.{}".format(stem, task_id, leaf))
        
        output_subsets = [
            get_subset_path(arguments.D),
            *[get_subset_path(arguments, f"{x}_map") for x in arguments.outputs]]
        
            "mpirun",
            "singularity", "exec", arguments.image,
            "python3", "fit.py", arguments.name,
            "-r", str(arguments.reference),
            "-p", str(arguments.population), "-g", str(arguments.generations),
            *[getattr(arguments, x) for x in ["scheme", "DW_SSFP", "B1_map"]],
            sub_mask_path, 
            *[getattr(arguments, f"{x}_map") for x in arguments.inputs],
            *output_subsets
        ])

if __name__ == "__main__":
    sys.exit(main())
